// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  image               String?
  isGlobalMod         Boolean           @default(false)
  bannedUntil         DateTime          @default("1970-01-01T00:00:00.000Z")
  accounts            Account[]
  sessions            Session[]
  posts               Post[]
  comment             Comment[]
  communities         Community[]
  favoriteCommunities CommunityMember[]
  postVotes           PostVote[]
  commentVotes        CommentVote[]
  notifications       Notification[]
  moderation          Moderator[]
  ban                 Ban?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String         @id @default(cuid())
  title         String
  content       String
  isDeleted     Boolean
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityName String
  community     Community      @relation(fields: [communityName], references: [name], onDelete: Cascade)
  votes         PostVote[]
  comments      Comment[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index(fields: [createdAt, communityName])
}

model PostVote {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Community {
  id         String            @id @default(cuid())
  name       String            @unique
  desc       String
  ownerId    String
  owner      User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  logo       String?
  image      String?
  posts      Post[]
  moderators Moderator[]
  rules      String[]          @default([])
  members    CommunityMember[]
}

model CommunityMember {
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@index([communityId, userId])
}

model Comment {
  id                       String         @id @default(cuid())
  content                  String
  isDeleted                Boolean
  userId                   String
  user                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId                   String
  post                     Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  votes                    CommentVote[]
  parentCommentId          String?
  parentComment            Comment?       @relation(fields: [parentCommentId], references: [id], onDelete: Cascade, name: "parent-child-comments")
  childComments            Comment[]      @relation(name: "parent-child-comments")
  notifications            Notification[]
  notificationsNewComments Notification[] @relation(name: "notifications-new-comments")
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  @@index(fields: [createdAt, postId, parentCommentId])
}

model CommentVote {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

enum NotificationType {
  LIKES_ON_POST
  LIKES_ON_COMMENT
  COMMENT_ON_POST
  COMMENT_ON_COMMENT
  TAG_ON_POST
  TAG_ON_COMMENT
}

model Notification {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedPostId    String
  relatedPost      Post     @relation(fields: [relatedPostId], references: [id], onDelete: Cascade)
  relatedCommentId String?
  relatedComment   Comment? @relation(fields: [relatedCommentId], references: [id], onDelete: Cascade)

  newComment   Comment? @relation(fields: [newCommentId], references: [id], onDelete: Cascade, name: "notifications-new-comments")
  newCommentId String?

  metadata  Int              @default(0)
  type      NotificationType
  updatedAt DateTime         @updatedAt
  seen      Boolean          @default(false)

  @@unique([userId, type, relatedPostId])
  @@index(fields: [updatedAt, userId, seen])
}

model Moderator {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index(fields: [userId, communityId])
}

model Ban {
  reason     String
  bannedId   String
  bannedUser User   @relation(fields: [bannedId], references: [id], onDelete: Cascade)

  @@unique([bannedId])
  @@index(fields: [bannedId])
}
