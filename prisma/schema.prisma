// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comment       Comment[]
  communities   Community[]
  votes         PostVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String
  isDeleted   Boolean
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  votes       PostVote[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model PostVote {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Community {
  id      String  @id @default(cuid())
  name    String  @unique
  desc    String
  ownerId String
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  logo    String?
  image   String?
  posts   Post[]
}

model Comment {
  id              String    @id @default(cuid())
  content         String
  isDeleted       Boolean
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId          String
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentCommentId String?
  parentComment   Comment?  @relation(fields: [parentCommentId], references: [id], onDelete: Cascade, name: "parent-child-comments")
  childComments   Comment[] @relation(name: "parent-child-comments")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
